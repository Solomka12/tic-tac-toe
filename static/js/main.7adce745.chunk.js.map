{"version":3,"sources":["utils.js","constants/index.js","assets/icons/o_icon.svg","assets/icons/x_icon.svg","components/Board.js","components/StatusPanel.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["getSplitArr","arr","gridCount","Array","Math","ceil","length","fill","map","item","i","slice","PLAYER_SIGN","Board","cells","handleCellSet","boardSize","winnerRow","reset","useState","hoveredCell","setHoveredCell","useEffect","vibrate","useCallback","throttle","duration","navigator","onTouchMove","e","touches","clientX","clientY","el","document","elementFromPoint","classList","contains","dataset","key","getCellClassNames","index","sameRow","floor","sameColumn","hovered","highlighted","Number","isInteger","victorious","includes","getCellStyle","styles","height","width","winIndex","findIndex","animationDelay","getBoardIndex","rowIndex","cellIndex","className","classNames","ended","Boolean","onClick","target","value","onTouchStart","onTouchEnd","changedTouches","cell","row","style","data-key","data-value","src","xIcon","oIcon","alt","StatusPanel","sign","score","currentPlayer","winnerSign","x","o","fitsVertically","fitsHorizontally","fitsBackHorizontally","getHorizontalRow","board","currWinnerRow","currRowCount","j","push","getVerticalRow","getDiagonalLTRRow","getDiagonalRTLRow","initialScore","Game","setBoard","setWinnerRow","setWinnerSign","setCurrentPlayer","setScore","initGame","getWinnerRow","prev","togglePlayer","p","horizontalRow","verticalRow","diagonalLTRRow","diagonalRTLRow","prevBoard","set","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qQAAaA,EAAc,SAACC,GAAyB,IAApBC,EAAmB,uDAAP,GACzC,OAAO,IAAIC,MAAMC,KAAKC,KAAKJ,EAAIK,OAASJ,IACnCK,KAAK,MACLC,KAAI,SAACC,EAAMC,GAAP,OAAaT,EAAIU,MAAMT,EAAYQ,EAAGR,EAAYQ,EAAIR,OCHtDU,EAAkB,IAAlBA,EAA0B,ICAxB,MAA0B,mCCA1B,MAA0B,mC,OCU1B,SAASC,EAAT,GAAqE,IAArDC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,MAAQ,EACzCC,mBAAS,MADgC,mBACxEC,EADwE,KAC3DC,EAD2D,KAG/EC,qBAAU,WACc,OAAhBF,GAAsBG,EAAQ,MACnC,CAACH,IAEJ,IAAMG,EAAUC,sBAAYC,oBAAS,SAACC,GAClCC,UAAUJ,QAAQ,GAClBI,UAAUJ,QAAQG,KACnB,KAAM,IASHE,EAAc,SAAAC,GAAM,IAAD,EACMA,EAAEC,QAAQ,GAA9BC,EADc,EACdA,QAASC,EADK,EACLA,QACVC,EAAKC,SAASC,iBAAiBJ,EAASC,GAC9CX,GAAiB,OAAFY,QAAE,IAAFA,OAAA,EAAAA,EAAIG,UAAUC,SAAS,UAAWJ,EAAGK,QAAQC,IAAM,OAehEC,EAAoB,SAAAC,GACtB,IAAMC,EAAUtC,KAAKuC,MAAMF,EAAQzB,KAAeZ,KAAKuC,MAAMvB,EAAcJ,GACrE4B,EAAaH,EAAQzB,IAAcI,EAAcJ,EAEvD,MAAO,CACH6B,QAASJ,IAAUrB,EACnB0B,YAAaC,OAAOC,UAAU5B,KAAiBsB,GAAWE,GAC1DK,WAAU,OAAEhC,QAAF,IAAEA,OAAF,EAAEA,EAAWiC,SAAST,KAIlCU,EAAe,SAAAV,GACjB,IAAMW,EAAS,CAACC,OAAO,GAAD,OAAK,IAAMrC,EAAX,KAAyBsC,MAAM,GAAD,OAAK,IAAMtC,EAAX,MAEpD,GAAIC,EAAW,CACX,IAAMsC,EAAWtC,EAAUuC,WAAU,SAAA9C,GAAC,OAAIA,IAAM+B,KAC5Cc,GAAY,IAAGH,EAAOK,eAAP,UAA2BF,GAAY,EAAIvC,GAA3C,MAGvB,OAAOoC,GAGLM,EAAgB,SAACC,EAAUC,GAAX,OAAyBD,EAAW3C,EAAY4C,GAEtE,OACI,sBAAKC,UAAWC,IAAW,gBAAiB,CAACC,MAAOC,QAAQ/C,KAA5D,UACI,qBAAK4C,UAAU,cAAcI,QAAS/C,EAAtC,SACI,sBAAM2C,UAAU,cAAhB,6BAGJ,uBACIA,UAAU,QACVI,QAzDa,SAAC,GAAoC,IAAD,IAAlCC,OAAS9B,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,QACvCF,EAAUC,SAAS,SAA6B,UAAlBC,EAAQ6B,QACtCpD,EAAcuB,EAAQC,KACtBhB,EAAQ,MAuDJ6C,aAAcxC,EACdA,YAAaA,EACbyC,WA/CO,SAAAxC,GAAM,IAAD,EACOA,EAAEyC,eAAe,GAArCvC,EADa,EACbA,QAASC,EADI,EACJA,QACVC,EAAKC,SAASC,iBAAiBJ,EAASC,GACxCS,EAAK,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAIK,QAAQC,IACpBgC,EAAOzD,EAAM2B,GACfA,GAAkB,OAAT8B,IACTxD,EAAc0B,GACdlB,EAAQ,KAEZF,EAAe,OAiCX,SAOI,gCACCrB,EAAYc,EAAOE,GAAWR,KAAI,SAACgE,EAAKb,GAAN,OAC/B,6BACKa,EAAIhE,KAAI,SAAC+D,EAAMX,GAAP,OACL,oBAEIa,MAAOtB,EAAaO,EAAcC,EAAUC,IAC5Cc,WAAUhB,EAAcC,EAAUC,GAClCe,aAAYJ,GAAQ,QACpBV,UAAWC,IAAW,OAAQtB,EAAkBkB,EAAcC,EAAUC,KAL5E,SAOKW,EAAO,qBAAKK,IAAKL,IAAS3D,EAAgBiE,EAAQC,EAAOC,IAAKR,IAAU,MANpEX,OAHRD,aC/Ed,SAASqB,EAAT,GAA0D,IAEjDC,EAFaC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,WAIvD,OACI,sBAAKvB,UAAWC,IAAW,eAAD,UAAoBqB,EAApB,UAA1B,UACI,uBAAMtB,UAAU,gBAAhB,UACKqB,EAAMG,EACP,qBAAKT,IAAKC,EAAOE,IAAI,SAEzB,uBAAMlB,UAAU,eAAhB,UACI,qBAAKe,KATGK,EAScG,GAAcD,EATpBF,IAASrE,EAAgBiE,EAAQC,GASGC,IAAKK,GAAcD,IACtEC,EAAa,UAAa,aAE/B,uBAAMvB,UAAU,gBAAhB,UACI,qBAAKe,IAAKE,EAAOC,IAAI,MACpBG,EAAMI,QChBvB,IAAMtE,EAAY,GAGZuE,EAAiB,SAAA7E,GAAC,OAAIA,EAAIM,GAA+BA,KACzDwE,EAAmB,SAAA9E,GAAC,OAAIA,EAAIM,EAHf,GAGyCA,GACtDyE,EAAuB,SAAA/E,GAAC,OAAIA,EAAIM,EAAJ,GAAoC,GAEhE0E,EAAmB,SAAChF,EAAG6D,GAAsB,IAAhBoB,EAAe,uDAAP,GACvC,IAAKH,EAAiB9E,GAAI,OAAO,KAKjC,IAHA,IAAIkF,EAAgB,CAAClF,GACjBmF,EAAe,EAEVC,EAAIpF,EAAI,EAAGmF,EAZL,GAaPF,EAAMG,KAAOvB,EAD0BuB,IAEvCF,EAAcG,KAAKD,GACnBD,IAMR,OAAOD,EAActF,QArBN,EAqB6BsF,EAAgB,MAG1DI,EAAiB,SAACtF,EAAG6D,GAAsB,IAAhBoB,EAAe,uDAAP,GACrC,IAAKJ,EAAe7E,GAAI,OAAO,KAK/B,IAHA,IAAIkF,EAAgB,CAAClF,GACjBmF,EAAe,EAEVC,EAAIpF,EAAIM,EAAW6E,EA9Bb,GA+BPF,EAAMG,KAAOvB,EADkCuB,GAAK9E,EAEpD4E,EAAcG,KAAKD,GACnBD,IAMR,OAAOD,EAActF,QAvCN,EAuC6BsF,EAAgB,MAG1DK,EAAoB,SAACvF,EAAG6D,GAAsB,IAAhBoB,EAAe,uDAAP,GACxC,IAAKH,EAAiB9E,KAAO6E,EAAe7E,GAAI,OAAO,KAKvD,IAHA,IAAIkF,EAAgB,CAAClF,GACjBmF,EAAe,EAEVC,EAAIpF,EAAIM,EAAY,EAAG6E,EAhDjB,GAiDPF,EAAMG,KAAOvB,EADsCuB,GAAK9E,GAExD4E,EAAcG,KAAKD,GACnBD,IAMR,OAAOD,EAActF,QAzDN,EAyD6BsF,EAAgB,MAG1DM,EAAoB,SAACxF,EAAG6D,GAAsB,IAAhBoB,EAAe,uDAAP,GACxC,IAAKJ,EAAe7E,KAAO+E,EAAqB/E,GAAI,OAAO,KAK3D,IAHA,IAAIkF,EAAgB,CAAClF,GACjBmF,EAAe,EAEVC,EAAIpF,EAAIM,EAAY,EAAG6E,EAlEjB,GAmEPF,EAAMG,KAAOvB,EADsCuB,GAAK9E,EAExD4E,EAAcG,KAAKD,GACnBD,IAMR,OAAOD,EAActF,QA3EN,EA2E6BsF,EAAgB,MAG1DO,GAAY,mBAAKvF,EAAgB,GAArB,cAAyBA,EAAgB,GAAzC,GAEH,SAASwF,IAAQ,IAAD,EACDjF,mBAAS,IADR,mBACpBwE,EADoB,KACbU,EADa,OAEOlF,mBAAS,MAFhB,mBAEpBF,EAFoB,KAETqF,EAFS,OAGSnF,mBAAS,MAHlB,mBAGpBiE,EAHoB,KAGRmB,EAHQ,OAIepF,mBAAS,MAJxB,mBAIpBgE,EAJoB,KAILqB,EAJK,OAKDrF,mBAASgF,GALR,mBAKpBjB,EALoB,KAKbuB,EALa,KAO3BnF,qBAAU,WACNoF,MACD,IAEHpF,qBAAU,WACN,IAAMkD,EAAMmC,IACRnC,GAAK8B,EAAa9B,KACvB,CAACmB,IAEJrE,qBAAU,WACN,GAAIL,EAAW,CACX,IAAMgE,EAAOU,EAAM1E,EAAU,IAC7BsF,EAActB,GACdwB,GAAS,SAAAG,GAAI,kCAASA,GAAT,kBAAgB3B,EAAO2B,EAAK3B,GAAQ,UAEtD,CAAChE,IAEJ,IAAMyF,EAAW,WACbxF,KAGEA,EAAQ,WACVsF,EAAiB5F,GACjByF,EAAS,IAAIlG,MAAMa,KAAuBT,KAAK,OAC/C+F,EAAa,MACbC,EAAc,OAQZM,EAAe,WACjBL,GAAiB,SAAAM,GAAC,OAAIA,IAAMlG,EAAgBA,EAAgBA,MAG1D+F,EAAe,WACjB,IAAK,IAAIjG,EAAI,EAAGA,EAAIiF,EAAMrF,OAAQI,IAAK,CACnC,IAAM6D,EAAOoB,EAAMjF,GAEnB,GAAI6D,EAAM,CACN,IAAMwC,EAAgBrB,EAAiBhF,EAAG6D,EAAMoB,GAChD,GAAIoB,EAAe,OAAOA,EAE1B,IAAMC,EAAchB,EAAetF,EAAG6D,EAAMoB,GAC5C,GAAIqB,EAAa,OAAOA,EAExB,IAAMC,EAAiBhB,EAAkBvF,EAAG6D,EAAMoB,GAClD,GAAIsB,EAAgB,OAAOA,EAE3B,IAAMC,EAAiBhB,EAAkBxF,EAAG6D,EAAMoB,GAClD,GAAIuB,EAAgB,OAAOA,KAKvC,OACI,sBAAKrD,UAAU,OAAf,UACI,cAACmB,EAAD,CACIE,MAAOA,EACPC,cAAeA,EACfC,WAAYA,IAGhB,cAACvE,EAAD,CACIC,MAAO6E,EACP3E,UAAWA,EACXC,UAAWA,EACXF,cAzCU,SAAA0B,GAClB4D,GAAS,SAAAc,GAAS,mBAAQC,cAAID,EAAW1E,EAAO0C,OAChD0B,KAwCQ3F,MAAOA,O,MC3JRmG,MAJf,WACE,OAAO,cAACjB,EAAD,KCKMkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/F,SAASgG,eAAe,SAM1BZ,M","file":"static/js/main.7adce745.chunk.js","sourcesContent":["export const getSplitArr = (arr, gridCount = 10) => {\r\n    return new Array(Math.ceil(arr.length / gridCount))\r\n        .fill(null)\r\n        .map((item, i) => arr.slice(gridCount * i, gridCount * i + gridCount));\r\n}","export const PLAYER_SIGN = {X: 'x', O: 'o'};","export default __webpack_public_path__ + \"static/media/o_icon.35020c88.svg\";","export default __webpack_public_path__ + \"static/media/x_icon.30726e8c.svg\";","import React, {useState, useEffect, useCallback} from 'react';\r\nimport classNames from 'classnames';\r\nimport {throttle} from 'lodash';\r\n\r\nimport {getSplitArr} from '../utils'\r\nimport {PLAYER_SIGN} from \"../constants\";\r\n\r\nimport oIcon from '../assets/icons/o_icon.svg';\r\nimport xIcon from '../assets/icons/x_icon.svg';\r\n\r\nexport default function Board({cells, handleCellSet, boardSize, winnerRow, reset}) {\r\n    const [hoveredCell, setHoveredCell] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (hoveredCell !== null) vibrate(15);\r\n    }, [hoveredCell]);\r\n\r\n    const vibrate = useCallback(throttle((duration) => {\r\n        navigator.vibrate(0);\r\n        navigator.vibrate(duration);\r\n    }, 100), []);\r\n\r\n    const handleBoardClick = ({target: {classList, dataset}}) => {\r\n        if (classList.contains('cell') && dataset.value === 'empty') {\r\n            handleCellSet(dataset.key);\r\n            vibrate(25);\r\n        }\r\n    };\r\n\r\n    const onTouchMove = e => {\r\n        const {clientX, clientY} = e.touches[0];\r\n        const el = document.elementFromPoint(clientX, clientY);\r\n        setHoveredCell(el?.classList.contains('cell') ? +el.dataset.key : null);\r\n    };\r\n\r\n    const onTouchEnd = e => {\r\n        const {clientX, clientY} = e.changedTouches[0];\r\n        const el = document.elementFromPoint(clientX, clientY);\r\n        const index = el?.dataset.key;\r\n        const cell = cells[index];\r\n        if (index && cell === null) {\r\n            handleCellSet(index);\r\n            vibrate(25);\r\n        }\r\n        setHoveredCell(null);\r\n    };\r\n\r\n    const getCellClassNames = index => {\r\n        const sameRow = Math.floor(index / boardSize) === Math.floor(hoveredCell / boardSize);\r\n        const sameColumn = index % boardSize === hoveredCell % boardSize;\r\n\r\n        return {\r\n            hovered: index === hoveredCell,\r\n            highlighted: Number.isInteger(hoveredCell) && (sameRow || sameColumn),\r\n            victorious: winnerRow?.includes(index),\r\n        };\r\n    };\r\n\r\n    const getCellStyle = index => {\r\n        const styles = {height: `${100 / boardSize}%`, width: `${100 / boardSize}%`};\r\n\r\n        if (winnerRow) {\r\n            const winIndex = winnerRow.findIndex(i => i === index);\r\n            if (winIndex >= 0) styles.animationDelay = `${winIndex * (1 / boardSize)}s`;\r\n        }\r\n\r\n        return styles;\r\n    };\r\n\r\n    const getBoardIndex = (rowIndex, cellIndex) => rowIndex * boardSize + cellIndex;\r\n\r\n    return (\r\n        <div className={classNames('board-wrapper', {ended: Boolean(winnerRow)})}>\r\n            <div className=\"reset-block\" onClick={reset}>\r\n                <span className=\"win-caption\">Click to play</span>\r\n            </div>\r\n\r\n            <table\r\n                className=\"board\"\r\n                onClick={handleBoardClick}\r\n                onTouchStart={onTouchMove}\r\n                onTouchMove={onTouchMove}\r\n                onTouchEnd={onTouchEnd}\r\n            >\r\n                <tbody>\r\n                {getSplitArr(cells, boardSize).map((row, rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                        {row.map((cell, cellIndex) => (\r\n                            <td\r\n                                key={cellIndex}\r\n                                style={getCellStyle(getBoardIndex(rowIndex, cellIndex))}\r\n                                data-key={getBoardIndex(rowIndex, cellIndex)}\r\n                                data-value={cell || 'empty'}\r\n                                className={classNames('cell', getCellClassNames(getBoardIndex(rowIndex, cellIndex)))}\r\n                            >\r\n                                {cell ? <img src={cell === PLAYER_SIGN.X ? xIcon : oIcon} alt={cell}/> : null}\r\n                            </td>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n","import classNames from 'classnames';\r\n\r\nimport {PLAYER_SIGN} from \"../constants\";\r\n\r\nimport oIcon from '../assets/icons/o_icon.svg';\r\nimport xIcon from '../assets/icons/x_icon.svg';\r\n\r\nexport default function StatusPanel({score, currentPlayer, winnerSign}) {\r\n\r\n    const getSignIcon = sign => sign === PLAYER_SIGN.X ? xIcon : oIcon;\r\n\r\n    return (\r\n        <div className={classNames('status-panel', `${currentPlayer}-move`)} >\r\n            <span className=\"panel-x-block\">\r\n                {score.x}\r\n                <img src={xIcon} alt=\"x\"/>\r\n            </span>\r\n            <span className=\"info-content\">\r\n                <img src={getSignIcon(winnerSign || currentPlayer)} alt={winnerSign || currentPlayer}/>\r\n                {winnerSign ? '\\'s win!' : '\\'s move'}\r\n            </span>\r\n            <span className=\"panel-o-block\">\r\n                <img src={oIcon} alt=\"o\"/>\r\n                {score.o}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {set} from 'lodash';\r\n\r\nimport Board from './Board';\r\nimport StatusPanel from './StatusPanel';\r\nimport {PLAYER_SIGN} from '../constants';\r\n\r\nconst boardSize = 10;\r\nconst marksToWin = 5;\r\n\r\nconst fitsVertically = i => i + boardSize * (marksToWin - 1) < boardSize * boardSize;\r\nconst fitsHorizontally = i => i % boardSize + marksToWin <= boardSize;\r\nconst fitsBackHorizontally = i => i % boardSize - (marksToWin - 1) >= 0;\r\n\r\nconst getHorizontalRow = (i, cell, board = []) => {\r\n    if (!fitsHorizontally(i)) return null;\r\n\r\n    let currWinnerRow = [i];\r\n    let currRowCount = 1;\r\n\r\n    for (let j = i + 1; currRowCount < marksToWin; j++) {\r\n        if (board[j] === cell) {\r\n            currWinnerRow.push(j);\r\n            currRowCount++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return currWinnerRow.length >= marksToWin ? currWinnerRow : null;\r\n};\r\n\r\nconst getVerticalRow = (i, cell, board = []) => {\r\n    if (!fitsVertically(i)) return null;\r\n\r\n    let currWinnerRow = [i];\r\n    let currRowCount = 1;\r\n\r\n    for (let j = i + boardSize; currRowCount < marksToWin; j += boardSize) {\r\n        if (board[j] === cell) {\r\n            currWinnerRow.push(j);\r\n            currRowCount++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return currWinnerRow.length >= marksToWin ? currWinnerRow : null;\r\n};\r\n\r\nconst getDiagonalLTRRow = (i, cell, board = []) => {\r\n    if (!fitsHorizontally(i) || !fitsVertically(i)) return null;\r\n\r\n    let currWinnerRow = [i];\r\n    let currRowCount = 1;\r\n\r\n    for (let j = i + boardSize + 1; currRowCount < marksToWin; j += boardSize + 1) {\r\n        if (board[j] === cell) {\r\n            currWinnerRow.push(j);\r\n            currRowCount++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return currWinnerRow.length >= marksToWin ? currWinnerRow : null;\r\n};\r\n\r\nconst getDiagonalRTLRow = (i, cell, board = []) => {\r\n    if (!fitsVertically(i) || !fitsBackHorizontally(i)) return null;\r\n\r\n    let currWinnerRow = [i];\r\n    let currRowCount = 1;\r\n\r\n    for (let j = i + boardSize - 1; currRowCount < marksToWin; j += boardSize - 1) {\r\n        if (board[j] === cell) {\r\n            currWinnerRow.push(j);\r\n            currRowCount++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return currWinnerRow.length >= marksToWin ? currWinnerRow : null;\r\n};\r\n\r\nconst initialScore = {[PLAYER_SIGN.X]: 0, [PLAYER_SIGN.O]: 0}\r\n\r\nexport default function Game() {\r\n    const [board, setBoard] = useState([]);\r\n    const [winnerRow, setWinnerRow] = useState(null);\r\n    const [winnerSign, setWinnerSign] = useState(null);\r\n    const [currentPlayer, setCurrentPlayer] = useState(null);\r\n    const [score, setScore] = useState(initialScore);\r\n\r\n    useEffect(() => {\r\n        initGame();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const row = getWinnerRow();\r\n        if (row) setWinnerRow(row);\r\n    }, [board]);\r\n\r\n    useEffect(() => {\r\n        if (winnerRow) {\r\n            const sign = board[winnerRow[0]];\r\n            setWinnerSign(sign);\r\n            setScore(prev => ({...prev, [sign]: prev[sign] + 1}))\r\n        }\r\n    }, [winnerRow]);\r\n\r\n    const initGame = () => {\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setCurrentPlayer(PLAYER_SIGN.X);\r\n        setBoard(new Array(boardSize * boardSize).fill(null));\r\n        setWinnerRow(null);\r\n        setWinnerSign(null);\r\n    };\r\n\r\n    const handleCellSet = index => {\r\n        setBoard(prevBoard => [...set(prevBoard, index, currentPlayer)]);\r\n        togglePlayer();\r\n    };\r\n\r\n    const togglePlayer = () => {\r\n        setCurrentPlayer(p => p === PLAYER_SIGN.X ? PLAYER_SIGN.O : PLAYER_SIGN.X);\r\n    };\r\n\r\n    const getWinnerRow = () => {\r\n        for (let i = 0; i < board.length; i++) {\r\n            const cell = board[i];\r\n\r\n            if (cell) {\r\n                const horizontalRow = getHorizontalRow(i, cell, board);\r\n                if (horizontalRow) return horizontalRow;\r\n\r\n                const verticalRow = getVerticalRow(i, cell, board);\r\n                if (verticalRow) return verticalRow;\r\n\r\n                const diagonalLTRRow = getDiagonalLTRRow(i, cell, board);\r\n                if (diagonalLTRRow) return diagonalLTRRow;\r\n\r\n                const diagonalRTLRow = getDiagonalRTLRow(i, cell, board);\r\n                if (diagonalRTLRow) return diagonalRTLRow;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <StatusPanel\r\n                score={score}\r\n                currentPlayer={currentPlayer}\r\n                winnerSign={winnerSign}\r\n            />\r\n\r\n            <Board\r\n                cells={board}\r\n                boardSize={boardSize}\r\n                winnerRow={winnerRow}\r\n                handleCellSet={handleCellSet}\r\n                reset={reset}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\n\nimport Game from './components/Game';\n\nimport './App.scss';\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}